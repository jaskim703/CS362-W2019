TESTING whoseTurn() function.
Test # 1 passed!
Test # 2 passed!
Test # 3 passed!
Test # 4 passed!
Test # 5 passed!
All tests passed!
TESTING updateCoins():
Test player 0 with 1 treasure card(s) and 0 bonus.
Test 1 passed! G.coins = 1, expected: 1
Test 2 passed! G.coins = 2, expected: 2
Test 3 passed! G.coins = 3, expected: 3
Test player 0 with 1 treasure card(s) and 1 bonus.
Test 4 passed! G.coins = 2, expected: 2
Test 5 passed! G.coins = 3, expected: 3
Test 6 passed! G.coins = 4, expected: 4
Test player 0 with 1 treasure card(s) and 2 bonus.
Test 7 passed! G.coins = 3, expected: 3
Test 8 passed! G.coins = 4, expected: 4
Test 9 passed! G.coins = 5, expected: 5
Test player 0 with 1 treasure card(s) and 3 bonus.
Test 10 passed! G.coins = 4, expected: 4
Test 11 passed! G.coins = 5, expected: 5
Test 12 passed! G.coins = 6, expected: 6
Test player 0 with 1 treasure card(s) and 4 bonus.
Test 13 passed! G.coins = 5, expected: 5
Test 14 passed! G.coins = 6, expected: 6
Test 15 passed! G.coins = 7, expected: 7
Test player 0 with 1 treasure card(s) and 5 bonus.
Test 16 passed! G.coins = 6, expected: 6
Test 17 passed! G.coins = 7, expected: 7
Test 18 passed! G.coins = 8, expected: 8
Test player 0 with 1 treasure card(s) and 6 bonus.
Test 19 passed! G.coins = 7, expected: 7
Test 20 passed! G.coins = 8, expected: 8
Test 21 passed! G.coins = 9, expected: 9
Test player 0 with 1 treasure card(s) and 7 bonus.
Test 22 passed! G.coins = 8, expected: 8
Test 23 passed! G.coins = 9, expected: 9
Test 24 passed! G.coins = 10, expected: 10
Test player 0 with 1 treasure card(s) and 8 bonus.
Test 25 passed! G.coins = 9, expected: 9
Test 26 passed! G.coins = 10, expected: 10
Test 27 passed! G.coins = 11, expected: 11
Test player 0 with 1 treasure card(s) and 9 bonus.
Test 28 passed! G.coins = 10, expected: 10
Test 29 passed! G.coins = 11, expected: 11
Test 30 passed! G.coins = 12, expected: 12
Test player 0 with 1 treasure card(s) and 10 bonus.
Test 31 passed! G.coins = 11, expected: 11
Test 32 passed! G.coins = 12, expected: 12
Test 33 passed! G.coins = 13, expected: 13
Test player 0 with 2 treasure card(s) and 0 bonus.
Test 34 passed! G.coins = 2, expected: 2
Test 35 passed! G.coins = 4, expected: 4
Test 36 passed! G.coins = 6, expected: 6
Test player 0 with 2 treasure card(s) and 1 bonus.
Test 37 passed! G.coins = 3, expected: 3
Test 38 passed! G.coins = 5, expected: 5
Test 39 passed! G.coins = 7, expected: 7
Test player 0 with 2 treasure card(s) and 2 bonus.
Test 40 passed! G.coins = 4, expected: 4
Test 41 passed! G.coins = 6, expected: 6
Test 42 passed! G.coins = 8, expected: 8
Test player 0 with 2 treasure card(s) and 3 bonus.
Test 43 passed! G.coins = 5, expected: 5
Test 44 passed! G.coins = 7, expected: 7
Test 45 passed! G.coins = 9, expected: 9
Test player 0 with 2 treasure card(s) and 4 bonus.
Test 46 passed! G.coins = 6, expected: 6
Test 47 passed! G.coins = 8, expected: 8
Test 48 passed! G.coins = 10, expected: 10
Test player 0 with 2 treasure card(s) and 5 bonus.
Test 49 passed! G.coins = 7, expected: 7
Test 50 passed! G.coins = 9, expected: 9
Test 51 passed! G.coins = 11, expected: 11
Test player 0 with 2 treasure card(s) and 6 bonus.
Test 52 passed! G.coins = 8, expected: 8
Test 53 passed! G.coins = 10, expected: 10
Test 54 passed! G.coins = 12, expected: 12
Test player 0 with 2 treasure card(s) and 7 bonus.
Test 55 passed! G.coins = 9, expected: 9
Test 56 passed! G.coins = 11, expected: 11
Test 57 passed! G.coins = 13, expected: 13
Test player 0 with 2 treasure card(s) and 8 bonus.
Test 58 passed! G.coins = 10, expected: 10
Test 59 passed! G.coins = 12, expected: 12
Test 60 passed! G.coins = 14, expected: 14
Test player 0 with 2 treasure card(s) and 9 bonus.
Test 61 passed! G.coins = 11, expected: 11
Test 62 passed! G.coins = 13, expected: 13
Test 63 passed! G.coins = 15, expected: 15
Test player 0 with 2 treasure card(s) and 10 bonus.
Test 64 passed! G.coins = 12, expected: 12
Test 65 passed! G.coins = 14, expected: 14
Test 66 passed! G.coins = 16, expected: 16
Test player 0 with 3 treasure card(s) and 0 bonus.
Test 67 passed! G.coins = 3, expected: 3
Test 68 passed! G.coins = 6, expected: 6
Test 69 passed! G.coins = 9, expected: 9
Test player 0 with 3 treasure card(s) and 1 bonus.
Test 70 passed! G.coins = 4, expected: 4
Test 71 passed! G.coins = 7, expected: 7
Test 72 passed! G.coins = 10, expected: 10
Test player 0 with 3 treasure card(s) and 2 bonus.
Test 73 passed! G.coins = 5, expected: 5
Test 74 passed! G.coins = 8, expected: 8
Test 75 passed! G.coins = 11, expected: 11
Test player 0 with 3 treasure card(s) and 3 bonus.
Test 76 passed! G.coins = 6, expected: 6
Test 77 passed! G.coins = 9, expected: 9
Test 78 passed! G.coins = 12, expected: 12
Test player 0 with 3 treasure card(s) and 4 bonus.
Test 79 passed! G.coins = 7, expected: 7
Test 80 passed! G.coins = 10, expected: 10
Test 81 passed! G.coins = 13, expected: 13
Test player 0 with 3 treasure card(s) and 5 bonus.
Test 82 passed! G.coins = 8, expected: 8
Test 83 passed! G.coins = 11, expected: 11
Test 84 passed! G.coins = 14, expected: 14
Test player 0 with 3 treasure card(s) and 6 bonus.
Test 85 passed! G.coins = 9, expected: 9
Test 86 passed! G.coins = 12, expected: 12
Test 87 passed! G.coins = 15, expected: 15
Test player 0 with 3 treasure card(s) and 7 bonus.
Test 88 passed! G.coins = 10, expected: 10
Test 89 passed! G.coins = 13, expected: 13
Test 90 passed! G.coins = 16, expected: 16
Test player 0 with 3 treasure card(s) and 8 bonus.
Test 91 passed! G.coins = 11, expected: 11
Test 92 passed! G.coins = 14, expected: 14
Test 93 passed! G.coins = 17, expected: 17
Test player 0 with 3 treasure card(s) and 9 bonus.
Test 94 passed! G.coins = 12, expected: 12
Test 95 passed! G.coins = 15, expected: 15
Test 96 passed! G.coins = 18, expected: 18
Test player 0 with 3 treasure card(s) and 10 bonus.
Test 97 passed! G.coins = 13, expected: 13
Test 98 passed! G.coins = 16, expected: 16
Test 99 passed! G.coins = 19, expected: 19
Test player 0 with 4 treasure card(s) and 0 bonus.
Test 100 passed! G.coins = 4, expected: 4
Test 101 passed! G.coins = 8, expected: 8
Test 102 passed! G.coins = 12, expected: 12
Test player 0 with 4 treasure card(s) and 1 bonus.
Test 103 passed! G.coins = 5, expected: 5
Test 104 passed! G.coins = 9, expected: 9
Test 105 passed! G.coins = 13, expected: 13
Test player 0 with 4 treasure card(s) and 2 bonus.
Test 106 passed! G.coins = 6, expected: 6
Test 107 passed! G.coins = 10, expected: 10
Test 108 passed! G.coins = 14, expected: 14
Test player 0 with 4 treasure card(s) and 3 bonus.
Test 109 passed! G.coins = 7, expected: 7
Test 110 passed! G.coins = 11, expected: 11
Test 111 passed! G.coins = 15, expected: 15
Test player 0 with 4 treasure card(s) and 4 bonus.
Test 112 passed! G.coins = 8, expected: 8
Test 113 passed! G.coins = 12, expected: 12
Test 114 passed! G.coins = 16, expected: 16
Test player 0 with 4 treasure card(s) and 5 bonus.
Test 115 passed! G.coins = 9, expected: 9
Test 116 passed! G.coins = 13, expected: 13
Test 117 passed! G.coins = 17, expected: 17
Test player 0 with 4 treasure card(s) and 6 bonus.
Test 118 passed! G.coins = 10, expected: 10
Test 119 passed! G.coins = 14, expected: 14
Test 120 passed! G.coins = 18, expected: 18
Test player 0 with 4 treasure card(s) and 7 bonus.
Test 121 passed! G.coins = 11, expected: 11
Test 122 passed! G.coins = 15, expected: 15
Test 123 passed! G.coins = 19, expected: 19
Test player 0 with 4 treasure card(s) and 8 bonus.
Test 124 passed! G.coins = 12, expected: 12
Test 125 passed! G.coins = 16, expected: 16
Test 126 passed! G.coins = 20, expected: 20
Test player 0 with 4 treasure card(s) and 9 bonus.
Test 127 passed! G.coins = 13, expected: 13
Test 128 passed! G.coins = 17, expected: 17
Test 129 passed! G.coins = 21, expected: 21
Test player 0 with 4 treasure card(s) and 10 bonus.
Test 130 passed! G.coins = 14, expected: 14
Test 131 passed! G.coins = 18, expected: 18
Test 132 passed! G.coins = 22, expected: 22
Test player 0 with 5 treasure card(s) and 0 bonus.
Test 133 passed! G.coins = 5, expected: 5
Test 134 passed! G.coins = 10, expected: 10
Test 135 passed! G.coins = 15, expected: 15
Test player 0 with 5 treasure card(s) and 1 bonus.
Test 136 passed! G.coins = 6, expected: 6
Test 137 passed! G.coins = 11, expected: 11
Test 138 passed! G.coins = 16, expected: 16
Test player 0 with 5 treasure card(s) and 2 bonus.
Test 139 passed! G.coins = 7, expected: 7
Test 140 passed! G.coins = 12, expected: 12
Test 141 passed! G.coins = 17, expected: 17
Test player 0 with 5 treasure card(s) and 3 bonus.
Test 142 passed! G.coins = 8, expected: 8
Test 143 passed! G.coins = 13, expected: 13
Test 144 passed! G.coins = 18, expected: 18
Test player 0 with 5 treasure card(s) and 4 bonus.
Test 145 passed! G.coins = 9, expected: 9
Test 146 passed! G.coins = 14, expected: 14
Test 147 passed! G.coins = 19, expected: 19
Test player 0 with 5 treasure card(s) and 5 bonus.
Test 148 passed! G.coins = 10, expected: 10
Test 149 passed! G.coins = 15, expected: 15
Test 150 passed! G.coins = 20, expected: 20
Test player 0 with 5 treasure card(s) and 6 bonus.
Test 151 passed! G.coins = 11, expected: 11
Test 152 passed! G.coins = 16, expected: 16
Test 153 passed! G.coins = 21, expected: 21
Test player 0 with 5 treasure card(s) and 7 bonus.
Test 154 passed! G.coins = 12, expected: 12
Test 155 passed! G.coins = 17, expected: 17
Test 156 passed! G.coins = 22, expected: 22
Test player 0 with 5 treasure card(s) and 8 bonus.
Test 157 passed! G.coins = 13, expected: 13
Test 158 passed! G.coins = 18, expected: 18
Test 159 passed! G.coins = 23, expected: 23
Test player 0 with 5 treasure card(s) and 9 bonus.
Test 160 passed! G.coins = 14, expected: 14
Test 161 passed! G.coins = 19, expected: 19
Test 162 passed! G.coins = 24, expected: 24
Test player 0 with 5 treasure card(s) and 10 bonus.
Test 163 passed! G.coins = 15, expected: 15
Test 164 passed! G.coins = 20, expected: 20
Test 165 passed! G.coins = 25, expected: 25
Test player 1 with 1 treasure card(s) and 0 bonus.
Test 166 passed! G.coins = 1, expected: 1
Test 167 passed! G.coins = 2, expected: 2
Test 168 passed! G.coins = 3, expected: 3
Test player 1 with 1 treasure card(s) and 1 bonus.
Test 169 passed! G.coins = 2, expected: 2
Test 170 passed! G.coins = 3, expected: 3
Test 171 passed! G.coins = 4, expected: 4
Test player 1 with 1 treasure card(s) and 2 bonus.
Test 172 passed! G.coins = 3, expected: 3
Test 173 passed! G.coins = 4, expected: 4
Test 174 passed! G.coins = 5, expected: 5
Test player 1 with 1 treasure card(s) and 3 bonus.
Test 175 passed! G.coins = 4, expected: 4
Test 176 passed! G.coins = 5, expected: 5
Test 177 passed! G.coins = 6, expected: 6
Test player 1 with 1 treasure card(s) and 4 bonus.
Test 178 passed! G.coins = 5, expected: 5
Test 179 passed! G.coins = 6, expected: 6
Test 180 passed! G.coins = 7, expected: 7
Test player 1 with 1 treasure card(s) and 5 bonus.
Test 181 passed! G.coins = 6, expected: 6
Test 182 passed! G.coins = 7, expected: 7
Test 183 passed! G.coins = 8, expected: 8
Test player 1 with 1 treasure card(s) and 6 bonus.
Test 184 passed! G.coins = 7, expected: 7
Test 185 passed! G.coins = 8, expected: 8
Test 186 passed! G.coins = 9, expected: 9
Test player 1 with 1 treasure card(s) and 7 bonus.
Test 187 passed! G.coins = 8, expected: 8
Test 188 passed! G.coins = 9, expected: 9
Test 189 passed! G.coins = 10, expected: 10
Test player 1 with 1 treasure card(s) and 8 bonus.
Test 190 passed! G.coins = 9, expected: 9
Test 191 passed! G.coins = 10, expected: 10
Test 192 passed! G.coins = 11, expected: 11
Test player 1 with 1 treasure card(s) and 9 bonus.
Test 193 passed! G.coins = 10, expected: 10
Test 194 passed! G.coins = 11, expected: 11
Test 195 passed! G.coins = 12, expected: 12
Test player 1 with 1 treasure card(s) and 10 bonus.
Test 196 passed! G.coins = 11, expected: 11
Test 197 passed! G.coins = 12, expected: 12
Test 198 passed! G.coins = 13, expected: 13
Test player 1 with 2 treasure card(s) and 0 bonus.
Test 199 passed! G.coins = 2, expected: 2
Test 200 passed! G.coins = 4, expected: 4
Test 201 passed! G.coins = 6, expected: 6
Test player 1 with 2 treasure card(s) and 1 bonus.
Test 202 passed! G.coins = 3, expected: 3
Test 203 passed! G.coins = 5, expected: 5
Test 204 passed! G.coins = 7, expected: 7
Test player 1 with 2 treasure card(s) and 2 bonus.
Test 205 passed! G.coins = 4, expected: 4
Test 206 passed! G.coins = 6, expected: 6
Test 207 passed! G.coins = 8, expected: 8
Test player 1 with 2 treasure card(s) and 3 bonus.
Test 208 passed! G.coins = 5, expected: 5
Test 209 passed! G.coins = 7, expected: 7
Test 210 passed! G.coins = 9, expected: 9
Test player 1 with 2 treasure card(s) and 4 bonus.
Test 211 passed! G.coins = 6, expected: 6
Test 212 passed! G.coins = 8, expected: 8
Test 213 passed! G.coins = 10, expected: 10
Test player 1 with 2 treasure card(s) and 5 bonus.
Test 214 passed! G.coins = 7, expected: 7
Test 215 passed! G.coins = 9, expected: 9
Test 216 passed! G.coins = 11, expected: 11
Test player 1 with 2 treasure card(s) and 6 bonus.
Test 217 passed! G.coins = 8, expected: 8
Test 218 passed! G.coins = 10, expected: 10
Test 219 passed! G.coins = 12, expected: 12
Test player 1 with 2 treasure card(s) and 7 bonus.
Test 220 passed! G.coins = 9, expected: 9
Test 221 passed! G.coins = 11, expected: 11
Test 222 passed! G.coins = 13, expected: 13
Test player 1 with 2 treasure card(s) and 8 bonus.
Test 223 passed! G.coins = 10, expected: 10
Test 224 passed! G.coins = 12, expected: 12
Test 225 passed! G.coins = 14, expected: 14
Test player 1 with 2 treasure card(s) and 9 bonus.
Test 226 passed! G.coins = 11, expected: 11
Test 227 passed! G.coins = 13, expected: 13
Test 228 passed! G.coins = 15, expected: 15
Test player 1 with 2 treasure card(s) and 10 bonus.
Test 229 passed! G.coins = 12, expected: 12
Test 230 passed! G.coins = 14, expected: 14
Test 231 passed! G.coins = 16, expected: 16
Test player 1 with 3 treasure card(s) and 0 bonus.
Test 232 passed! G.coins = 3, expected: 3
Test 233 passed! G.coins = 6, expected: 6
Test 234 passed! G.coins = 9, expected: 9
Test player 1 with 3 treasure card(s) and 1 bonus.
Test 235 passed! G.coins = 4, expected: 4
Test 236 passed! G.coins = 7, expected: 7
Test 237 passed! G.coins = 10, expected: 10
Test player 1 with 3 treasure card(s) and 2 bonus.
Test 238 passed! G.coins = 5, expected: 5
Test 239 passed! G.coins = 8, expected: 8
Test 240 passed! G.coins = 11, expected: 11
Test player 1 with 3 treasure card(s) and 3 bonus.
Test 241 passed! G.coins = 6, expected: 6
Test 242 passed! G.coins = 9, expected: 9
Test 243 passed! G.coins = 12, expected: 12
Test player 1 with 3 treasure card(s) and 4 bonus.
Test 244 passed! G.coins = 7, expected: 7
Test 245 passed! G.coins = 10, expected: 10
Test 246 passed! G.coins = 13, expected: 13
Test player 1 with 3 treasure card(s) and 5 bonus.
Test 247 passed! G.coins = 8, expected: 8
Test 248 passed! G.coins = 11, expected: 11
Test 249 passed! G.coins = 14, expected: 14
Test player 1 with 3 treasure card(s) and 6 bonus.
Test 250 passed! G.coins = 9, expected: 9
Test 251 passed! G.coins = 12, expected: 12
Test 252 passed! G.coins = 15, expected: 15
Test player 1 with 3 treasure card(s) and 7 bonus.
Test 253 passed! G.coins = 10, expected: 10
Test 254 passed! G.coins = 13, expected: 13
Test 255 passed! G.coins = 16, expected: 16
Test player 1 with 3 treasure card(s) and 8 bonus.
Test 256 passed! G.coins = 11, expected: 11
Test 257 passed! G.coins = 14, expected: 14
Test 258 passed! G.coins = 17, expected: 17
Test player 1 with 3 treasure card(s) and 9 bonus.
Test 259 passed! G.coins = 12, expected: 12
Test 260 passed! G.coins = 15, expected: 15
Test 261 passed! G.coins = 18, expected: 18
Test player 1 with 3 treasure card(s) and 10 bonus.
Test 262 passed! G.coins = 13, expected: 13
Test 263 passed! G.coins = 16, expected: 16
Test 264 passed! G.coins = 19, expected: 19
Test player 1 with 4 treasure card(s) and 0 bonus.
Test 265 passed! G.coins = 4, expected: 4
Test 266 passed! G.coins = 8, expected: 8
Test 267 passed! G.coins = 12, expected: 12
Test player 1 with 4 treasure card(s) and 1 bonus.
Test 268 passed! G.coins = 5, expected: 5
Test 269 passed! G.coins = 9, expected: 9
Test 270 passed! G.coins = 13, expected: 13
Test player 1 with 4 treasure card(s) and 2 bonus.
Test 271 passed! G.coins = 6, expected: 6
Test 272 passed! G.coins = 10, expected: 10
Test 273 passed! G.coins = 14, expected: 14
Test player 1 with 4 treasure card(s) and 3 bonus.
Test 274 passed! G.coins = 7, expected: 7
Test 275 passed! G.coins = 11, expected: 11
Test 276 passed! G.coins = 15, expected: 15
Test player 1 with 4 treasure card(s) and 4 bonus.
Test 277 passed! G.coins = 8, expected: 8
Test 278 passed! G.coins = 12, expected: 12
Test 279 passed! G.coins = 16, expected: 16
Test player 1 with 4 treasure card(s) and 5 bonus.
Test 280 passed! G.coins = 9, expected: 9
Test 281 passed! G.coins = 13, expected: 13
Test 282 passed! G.coins = 17, expected: 17
Test player 1 with 4 treasure card(s) and 6 bonus.
Test 283 passed! G.coins = 10, expected: 10
Test 284 passed! G.coins = 14, expected: 14
Test 285 passed! G.coins = 18, expected: 18
Test player 1 with 4 treasure card(s) and 7 bonus.
Test 286 passed! G.coins = 11, expected: 11
Test 287 passed! G.coins = 15, expected: 15
Test 288 passed! G.coins = 19, expected: 19
Test player 1 with 4 treasure card(s) and 8 bonus.
Test 289 passed! G.coins = 12, expected: 12
Test 290 passed! G.coins = 16, expected: 16
Test 291 passed! G.coins = 20, expected: 20
Test player 1 with 4 treasure card(s) and 9 bonus.
Test 292 passed! G.coins = 13, expected: 13
Test 293 passed! G.coins = 17, expected: 17
Test 294 passed! G.coins = 21, expected: 21
Test player 1 with 4 treasure card(s) and 10 bonus.
Test 295 passed! G.coins = 14, expected: 14
Test 296 passed! G.coins = 18, expected: 18
Test 297 passed! G.coins = 22, expected: 22
Test player 1 with 5 treasure card(s) and 0 bonus.
Test 298 passed! G.coins = 5, expected: 5
Test 299 passed! G.coins = 10, expected: 10
Test 300 passed! G.coins = 15, expected: 15
Test player 1 with 5 treasure card(s) and 1 bonus.
Test 301 passed! G.coins = 6, expected: 6
Test 302 passed! G.coins = 11, expected: 11
Test 303 passed! G.coins = 16, expected: 16
Test player 1 with 5 treasure card(s) and 2 bonus.
Test 304 passed! G.coins = 7, expected: 7
Test 305 passed! G.coins = 12, expected: 12
Test 306 passed! G.coins = 17, expected: 17
Test player 1 with 5 treasure card(s) and 3 bonus.
Test 307 passed! G.coins = 8, expected: 8
Test 308 passed! G.coins = 13, expected: 13
Test 309 passed! G.coins = 18, expected: 18
Test player 1 with 5 treasure card(s) and 4 bonus.
Test 310 passed! G.coins = 9, expected: 9
Test 311 passed! G.coins = 14, expected: 14
Test 312 passed! G.coins = 19, expected: 19
Test player 1 with 5 treasure card(s) and 5 bonus.
Test 313 passed! G.coins = 10, expected: 10
Test 314 passed! G.coins = 15, expected: 15
Test 315 passed! G.coins = 20, expected: 20
Test player 1 with 5 treasure card(s) and 6 bonus.
Test 316 passed! G.coins = 11, expected: 11
Test 317 passed! G.coins = 16, expected: 16
Test 318 passed! G.coins = 21, expected: 21
Test player 1 with 5 treasure card(s) and 7 bonus.
Test 319 passed! G.coins = 12, expected: 12
Test 320 passed! G.coins = 17, expected: 17
Test 321 passed! G.coins = 22, expected: 22
Test player 1 with 5 treasure card(s) and 8 bonus.
Test 322 passed! G.coins = 13, expected: 13
Test 323 passed! G.coins = 18, expected: 18
Test 324 passed! G.coins = 23, expected: 23
Test player 1 with 5 treasure card(s) and 9 bonus.
Test 325 passed! G.coins = 14, expected: 14
Test 326 passed! G.coins = 19, expected: 19
Test 327 passed! G.coins = 24, expected: 24
Test player 1 with 5 treasure card(s) and 10 bonus.
Test 328 passed! G.coins = 15, expected: 15
Test 329 passed! G.coins = 20, expected: 20
Test 330 passed! G.coins = 25, expected: 25
All tests passed!
TESTING isGameOver() function.
Current number of Province cards: 8
Game continues
Current number of Province cards: 0
Test passed! Game ended correctly
Test passed! Game continues as it should
Test passed! Game continues as it should
Test passed! Game ended correctly
All tests passed!
TESTING buyCard() function.
Test to see if enough coins
Test passed! Not enough coins
Test failed. Unable to purchase card
Test passed! No remaining buys
Tests failed. Please review.
TESTING adventurer_card():
Test passed. The Adventurer card has been drawn.
Test passed! 2 treasure cards were drawn!
Test passed! Cards were added to the hand.
Congrats! Tests passed!

TESTING smithy_card():
Test passed! The Smithy card has been drawn.
Test passed! The current player has drawn 3 new cards.
Congrats! Tests passed!

TESTING village_card():
Test passed! The Village card has been drawn.
Test passed! The current player has drawn a new card.
Test failed. The current player did not get +2 actions.
Tests failed. Please review.

File 'dominion.c'
Lines executed:30.55% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7503420:    8:int compare(const void* a, const void* b) {
  7503420:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
  7503420:   11:  if (*(int*)a < *(int*)b)
  2000912:   12:    return -1;
  5502508:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
   250114:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   250114:   44:  SelectStream(1);
   250114:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   250114:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   250114:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  2751254:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
 27512540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
 25011400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   250114:   73:  if (numPlayers == 2)
        -:   74:    {
   250114:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   250114:   87:  if (numPlayers == 2)
        -:   88:    {
   250114:   89:      state->supplyCount[estate] = 8;
   250114:   90:      state->supplyCount[duchy] = 8;
   250114:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   250114:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   250114:  102:  state->supplyCount[silver] = 40;
   250114:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  5252394:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
 41268810:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
 38767670:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  2501140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
  1000456:  115:		  if (numPlayers == 2){ 
   500228:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  2000912:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2501140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 36266530:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   750342:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   500228:  140:      state->deckCount[i] = 0;
  2000912:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
  1500684:  143:	  state->deck[i][j] = estate;
  1500684:  144:	  state->deckCount[i]++;
        -:  145:	}
  4001824:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
  3501596:  148:	  state->deck[i][j] = copper;
  3501596:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   750342:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   500228:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   750342:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   500228:  166:      state->handCount[i] = 0;
   500228:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  7003192:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  6753078:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   250114:  182:  state->outpostPlayed = 0;
   250114:  183:  state->phase = 0;
   250114:  184:  state->numActions = 1;
   250114:  185:  state->numBuys = 1;
   250114:  186:  state->playedCardCount = 0;
   250114:  187:  state->whoseTurn = 0;
   250114:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  1500684:  192:  for (it = 0; it < 5; it++){
  1250570:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
   250114:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   250114:  198:  return 0;
        -:  199:}
        -:  200:
   591975:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   591975:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   591975:  209:  if (state->deckCount[player] < 1)
    91747:  210:    return -1;
   500228:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  6002736:  214:  while (state->deckCount[player] > 0) {
  5002280:  215:    card = floor(Random() * state->deckCount[player]);
  5002280:  216:    newDeck[newDeckPos] = state->deck[player][card];
  5002280:  217:    newDeckPos++;
 17507980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 12505700:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  5002280:  221:    state->deckCount[player]--;
        -:  222:  }
  5502508:  223:  for (i = 0; i < newDeckPos; i++) {
  5002280:  224:    state->deck[player][i] = newDeck[i];
  5002280:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   500228:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        3:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        3:  280:  who = state->whoseTurn;
        -:  281:
        3:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        3:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
   250008:  346:int whoseTurn(struct gameState *state) {
   250008:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       12:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        7:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
  4506060:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  4506060:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    51486:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    51486:  538:    state->deckCount[player] = state->discardCount[player];
    51486:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    51486:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    51486:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    51486:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    51486:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    51486:  559:    if (deckCounter == 0)
    51486:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  4454574:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4454574:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4454574:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4454574:  576:    state->deckCount[player]--;
  4454574:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  4454574:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645://Card: Adventurer. Changed to Function by deatona
   100001:  646:void adventurerF(int z, int drawntreasure, int currentPlayer, struct gameState *state){
        -:  647:	int cardDrawn;
        -:  648:	int temphand[MAX_HAND];
  3005488:  649:      while(drawntreasure<2){
  2805486:  650:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    40261:  651:	  shuffle(currentPlayer, state);
        -:  652:	}
  2805486:  653:	drawCard(currentPlayer, state);
  2805486:  654:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  2805486:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
   200002:  656:	  drawntreasure++;
        -:  657:	else{
  2605484:  658:	  temphand[z]=cardDrawn;
  2605484:  659:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  2605484:  660:	  z++;
        -:  661:	}
        -:  662:      }
  2805486:  663:      while(z-1>=0){
  2605484:  664:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  2605484:  665:	z=z-1;
        -:  666:      }
   100001:  667:}
        -:  668:
        -:  669://Card: Council Room: Changed to Function by deatona
    #####:  670:void council_roomF(int currentPlayer, struct gameState *state, int handPos){
        -:  671:	int i;
    #####:  672:      	for (i = 0; i < 4; i++)
        -:  673:	{
    #####:  674:	  	drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:			
        -:  677:      	//+1 Buy
    #####:  678:      	state->numBuys++;
        -:  679:			
        -:  680:      	//Each other player draws a card
    #####:  681:      	for (i = 0; i < state->numPlayers; i++)
        -:  682:	{
    #####:  683:	  if ( i == currentPlayer )
        -:  684:	    {
    #####:  685:	      drawCard(i, state);
        -:  686:	    }
        -:  687:	}
        -:  688:			
        -:  689:      //put played card in played card pile
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
    #####:  691:}
        -:  692:
        -:  693://Card: Smithy +3 cards.Changed to Function by deatona
   150001:  694:void smithyF(int currentPlayer, struct gameState *state, int handPos){
        -:  695:      //+3 Cards
        -:  696:      int i;
   600004:  697:      for (i = 0; i < 3; i++)
        -:  698:	{
   450003:  699:	  drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:			
        -:  702:      //discard card from hand
   150001:  703:      discardCard(handPos, currentPlayer, state, 0);
   150001:  704:}
        -:  705://Card Steward: Change to function by deaton
    #####:  706:void stewardF(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos){
    #####:  707:      if (choice1 == 1)
        -:  708:	{
        -:  709:	  //+2 cards
    #####:  710:	  drawCard(currentPlayer, state);
    #####:  711:	  drawCard(currentPlayer, state);
        -:  712:	}
    #####:  713:      else if (choice1 == 2)
        -:  714:	{
        -:  715:	  //+2 coins
    #####:  716:	  state->coins = state->coins + 2;
        -:  717:	}
        -:  718:      else
        -:  719:	{
        -:  720:	  //trash 2 cards in hand
    #####:  721:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  722:	  discardCard(choice3, currentPlayer, state, 1);
        -:  723:	}
        -:  724:			
        -:  725:      //discard card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
    #####:  727:}
        -:  728:
        -:  729://Card: Village. Changed to function by deatona
        1:  730:void villageF(int currentPlayer, struct gameState *state, int handPos){
        -:  731:      //+1 Card
        1:  732:      drawCard(currentPlayer, state);
        -:  733:			
        -:  734:      //+2 Actions
        1:  735:      state->numActions = state->numActions + 4;
        -:  736:			
        -:  737:      //discard played card from hand
        1:  738:      discardCard(handPos, currentPlayer, state, 0);
        1:  739:}
        -:  740:
        -:  741:
   250003:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
   250003:  749:  int currentPlayer = whoseTurn(state);
   250003:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
   250003:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
   250003:  754:  int drawntreasure=0;
        -:  755: // int cardDrawn;
   250003:  756:  int z = 0;// this is the counter for the temp hand
   250003:  757:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
   250003:  763:  switch( card ) 
        -:  764:    {
        -:  765:    case adventurer:
   100001:  766:	adventurerF(z, drawntreasure, currentPlayer, state);
   100001:  767:      return 0;
        -:  768:			
        -:  769:    case council_room:
    #####:  770:	council_roomF(currentPlayer, state, handPos);
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case feast:
        -:  774:      //gain card with cost up to 5
        -:  775:      //Backup hand
    #####:  776:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  777:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  778:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  779:      }
        -:  780:      //Backup hand
        -:  781:
        -:  782:      //Update Coins for Buy
    #####:  783:      updateCoins(currentPlayer, state, 5);
    #####:  784:      x = 1;//Condition to loop on
    #####:  785:      while( x == 1) {//Buy one card
    #####:  786:	if (supplyCount(choice1, state) <= 0){
        -:  787:	  if (DEBUG)
        -:  788:	    printf("None of that card left, sorry!\n");
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  792:	  }
        -:  793:	}
    #####:  794:	else if (state->coins < getCost(choice1)){
    #####:  795:	  printf("That card is too expensive!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  799:	  }
        -:  800:	}
        -:  801:	else{
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:	  }
        -:  806:
    #####:  807:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  808:	  x = 0;//No more buying cards
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
        -:  814:	}
        -:  815:      }     
        -:  816:
        -:  817:      //Reset Hand
    #####:  818:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  819:	state->hand[currentPlayer][i] = temphand[i];
    #####:  820:	temphand[i] = -1;
        -:  821:      }
        -:  822:      //Reset Hand
        -:  823:      			
    #####:  824:      return 0;
        -:  825:			
        -:  826:    case gardens:
    #####:  827:      return -1;
        -:  828:			
        -:  829:    case mine:
    #####:  830:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:		
    #####:  837:      if (choice2 > treasure_map || choice2 < curse)
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      gainCard(choice2, state, 2, currentPlayer);
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  854:	{
    #####:  855:	  if (state->hand[currentPlayer][i] == j)
        -:  856:	    {
    #####:  857:	      discardCard(i, currentPlayer, state, 0);			
    #####:  858:	      break;
        -:  859:	    }
        -:  860:	}
        -:  861:			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 0, currentPlayer);
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:
        -:  887:
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case smithy:
        -:  891:      //+3 Cards
   150001:  892:      smithyF(currentPlayer, state, handPos);
   150001:  893:      return 0;
        -:  894:		
        -:  895:    case village:
        1:  896:	villageF(currentPlayer, state, handPos);
        1:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
        -:  951:      //+1 Card
    #####:  952:      drawCard(currentPlayer, state);
        -:  953:			
        -:  954:      //+1 Actions
    #####:  955:      state->numActions++;
        -:  956:			
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case minion:
        -:  962:      //+1 action
    #####:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:			
    #####:  968:      if (choice1)		//+2 coins
        -:  969:	{
    #####:  970:	  state->coins = state->coins + 2;
        -:  971:	}
        -:  972:			
    #####:  973:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  974:	{
        -:  975:	  //discard hand
    #####:  976:	  while(numHandCards(state) > 0)
        -:  977:	    {
    #####:  978:	      discardCard(handPos, currentPlayer, state, 0);
        -:  979:	    }
        -:  980:				
        -:  981:	  //draw 4
    #####:  982:	  for (i = 0; i < 4; i++)
        -:  983:	    {
    #####:  984:	      drawCard(currentPlayer, state);
        -:  985:	    }
        -:  986:				
        -:  987:	  //other players discard hand and redraw if hand size > 4
    #####:  988:	  for (i = 0; i < state->numPlayers; i++)
        -:  989:	    {
    #####:  990:	      if (i != currentPlayer)
        -:  991:		{
    #####:  992:		  if ( state->handCount[i] > 4 )
        -:  993:		    {
        -:  994:		      //discard hand
    #####:  995:		      while( state->handCount[i] > 0 )
        -:  996:			{
    #####:  997:			  discardCard(handPos, i, state, 0);
        -:  998:			}
        -:  999:							
        -: 1000:		      //draw 4
    #####: 1001:		      for (j = 0; j < 4; j++)
        -: 1002:			{
    #####: 1003:			  drawCard(i, state);
        -: 1004:			}
        -: 1005:		    }
        -: 1006:		}
        -: 1007:	    }
        -: 1008:				
        -: 1009:	}
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case steward:
    #####: 1013:	stewardF(currentPlayer, state, choice1, choice2, choice3, handPos);
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:	  drawCard(currentPlayer, state);
    #####: 1066:	  drawCard(currentPlayer, state);
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
   150002: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
   150002: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
   150002: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   150002: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
   150002: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
   150002: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
     1589: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
   148413: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
      292: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
   148121: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
   148121: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
   148121: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
   150002: 1288:  return 0;
        -: 1289:}
        -: 1290:
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
   250444: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
   250444: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
  1502004: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
  1251560: 1338:      if (state->hand[player][i] == copper)
        -: 1339:	{
  1000786: 1340:	  state->coins += 1;
        -: 1341:	}
   250774: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:	{
      330: 1344:	  state->coins += 2;
        -: 1345:	}
   250444: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:	{
      330: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
   250444: 1353:  state->coins += bonus;
        -: 1354:
   250444: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
File 'dominion.c'
Lines executed:30.55% of 563
Branches executed:29.98% of 417
Taken at least once:22.30% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 7503420 returned 100% blocks executed 83%
  7503420:    8:int compare(const void* a, const void* b) {
  7503420:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
  7503420:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
  2000912:   12:    return -1;
  5502508:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 250114 returned 100% blocks executed 88%
   250114:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   250114:   44:  SelectStream(1);
call    0 returned 100%
   250114:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
   250114:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   250114:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  2751254:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
 27512540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
 25011400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   250114:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
   250114:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   250114:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
   250114:   89:      state->supplyCount[estate] = 8;
   250114:   90:      state->supplyCount[duchy] = 8;
   250114:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   250114:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   250114:  102:  state->supplyCount[silver] = 40;
   250114:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  5252394:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
 41268810:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
 38767670:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  2501140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
  1000456:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   500228:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  2000912:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2501140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 36266530:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   750342:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
   500228:  140:      state->deckCount[i] = 0;
  2000912:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
  1500684:  143:	  state->deck[i][j] = estate;
  1500684:  144:	  state->deckCount[i]++;
        -:  145:	}
  4001824:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
  3501596:  148:	  state->deck[i][j] = copper;
  3501596:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   750342:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
   500228:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   750342:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   500228:  166:      state->handCount[i] = 0;
   500228:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  7003192:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  6753078:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   250114:  182:  state->outpostPlayed = 0;
   250114:  183:  state->phase = 0;
   250114:  184:  state->numActions = 1;
   250114:  185:  state->numBuys = 1;
   250114:  186:  state->playedCardCount = 0;
   250114:  187:  state->whoseTurn = 0;
   250114:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  1500684:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  1250570:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
   250114:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
   250114:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 591975 returned 100% blocks executed 100%
   591975:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   591975:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   591975:  209:  if (state->deckCount[player] < 1)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
    91747:  210:    return -1;
   500228:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  6002736:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  5002280:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  5002280:  216:    newDeck[newDeckPos] = state->deck[player][card];
  5002280:  217:    newDeckPos++;
 17507980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
 12505700:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  5002280:  221:    state->deckCount[player]--;
        -:  222:  }
  5502508:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  5002280:  224:    state->deck[player][i] = newDeck[i];
  5002280:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   500228:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 3 returned 100% blocks executed 43%
        3:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        3:  280:  who = state->whoseTurn;
        -:  281:
        3:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        3:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 250008 returned 100% blocks executed 100%
   250008:  346:int whoseTurn(struct gameState *state) {
   250008:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 9 returned 100% blocks executed 100%
        9:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
       12:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        7:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4506060 returned 100% blocks executed 85%
  4506060:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  4506060:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    51486:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    51486:  538:    state->deckCount[player] = state->discardCount[player];
    51486:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    51486:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    51486:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    51486:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    51486:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    51486:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    51486:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  4454574:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4454574:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4454574:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4454574:  576:    state->deckCount[player]--;
  4454574:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  4454574:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645://Card: Adventurer. Changed to Function by deatona
function adventurerF called 100001 returned 100% blocks executed 100%
   100001:  646:void adventurerF(int z, int drawntreasure, int currentPlayer, struct gameState *state){
        -:  647:	int cardDrawn;
        -:  648:	int temphand[MAX_HAND];
  3005488:  649:      while(drawntreasure<2){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
  2805486:  650:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
    40261:  651:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  652:	}
  2805486:  653:	drawCard(currentPlayer, state);
call    0 returned 100%
  2805486:  654:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  2805486:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
   200002:  656:	  drawntreasure++;
        -:  657:	else{
  2605484:  658:	  temphand[z]=cardDrawn;
  2605484:  659:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  2605484:  660:	  z++;
        -:  661:	}
        -:  662:      }
  2805486:  663:      while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
  2605484:  664:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  2605484:  665:	z=z-1;
        -:  666:      }
   100001:  667:}
        -:  668:
        -:  669://Card: Council Room: Changed to Function by deatona
function council_roomF called 0 returned 0% blocks executed 0%
    #####:  670:void council_roomF(int currentPlayer, struct gameState *state, int handPos){
        -:  671:	int i;
    #####:  672:      	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  673:	{
    #####:  674:	  	drawCard(currentPlayer, state);
call    0 never executed
        -:  675:	}
        -:  676:			
        -:  677:      	//+1 Buy
    #####:  678:      	state->numBuys++;
        -:  679:			
        -:  680:      	//Each other player draws a card
    #####:  681:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  682:	{
    #####:  683:	  if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  684:	    {
    #####:  685:	      drawCard(i, state);
call    0 never executed
        -:  686:	    }
        -:  687:	}
        -:  688:			
        -:  689:      //put played card in played card pile
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  691:}
        -:  692:
        -:  693://Card: Smithy +3 cards.Changed to Function by deatona
function smithyF called 150001 returned 100% blocks executed 100%
   150001:  694:void smithyF(int currentPlayer, struct gameState *state, int handPos){
        -:  695:      //+3 Cards
        -:  696:      int i;
   600004:  697:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  698:	{
   450003:  699:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  700:	}
        -:  701:			
        -:  702:      //discard card from hand
   150001:  703:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
   150001:  704:}
        -:  705://Card Steward: Change to function by deaton
function stewardF called 0 returned 0% blocks executed 0%
    #####:  706:void stewardF(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos){
    #####:  707:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  708:	{
        -:  709:	  //+2 cards
    #####:  710:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  711:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  712:	}
    #####:  713:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  714:	{
        -:  715:	  //+2 coins
    #####:  716:	  state->coins = state->coins + 2;
        -:  717:	}
        -:  718:      else
        -:  719:	{
        -:  720:	  //trash 2 cards in hand
    #####:  721:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  722:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  723:	}
        -:  724:			
        -:  725:      //discard card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  727:}
        -:  728:
        -:  729://Card: Village. Changed to function by deatona
function villageF called 1 returned 100% blocks executed 100%
        1:  730:void villageF(int currentPlayer, struct gameState *state, int handPos){
        -:  731:      //+1 Card
        1:  732:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  733:			
        -:  734:      //+2 Actions
        1:  735:      state->numActions = state->numActions + 4;
        -:  736:			
        -:  737:      //discard played card from hand
        1:  738:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  739:}
        -:  740:
        -:  741:
function cardEffect called 250003 returned 100% blocks executed 5%
   250003:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
   250003:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   250003:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
   250003:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
   250003:  754:  int drawntreasure=0;
        -:  755: // int cardDrawn;
   250003:  756:  int z = 0;// this is the counter for the temp hand
   250003:  757:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
   250003:  763:  switch( card ) 
branch  0 taken 40%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 60%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
   100001:  766:	adventurerF(z, drawntreasure, currentPlayer, state);
call    0 returned 100%
   100001:  767:      return 0;
        -:  768:			
        -:  769:    case council_room:
    #####:  770:	council_roomF(currentPlayer, state, handPos);
call    0 never executed
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case feast:
        -:  774:      //gain card with cost up to 5
        -:  775:      //Backup hand
    #####:  776:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  777:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  778:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  779:      }
        -:  780:      //Backup hand
        -:  781:
        -:  782:      //Update Coins for Buy
    #####:  783:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  784:      x = 1;//Condition to loop on
    #####:  785:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  786:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  787:	  if (DEBUG)
        -:  788:	    printf("None of that card left, sorry!\n");
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  792:	  }
        -:  793:	}
    #####:  794:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  799:	  }
        -:  800:	}
        -:  801:	else{
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:	  }
        -:  806:
    #####:  807:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  808:	  x = 0;//No more buying cards
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
        -:  814:	}
        -:  815:      }     
        -:  816:
        -:  817:      //Reset Hand
    #####:  818:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  819:	state->hand[currentPlayer][i] = temphand[i];
    #####:  820:	temphand[i] = -1;
        -:  821:      }
        -:  822:      //Reset Hand
        -:  823:      			
    #####:  824:      return 0;
        -:  825:			
        -:  826:    case gardens:
    #####:  827:      return -1;
        -:  828:			
        -:  829:    case mine:
    #####:  830:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:		
    #####:  837:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  854:	{
    #####:  855:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  858:	      break;
        -:  859:	    }
        -:  860:	}
        -:  861:			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:
        -:  887:
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case smithy:
        -:  891:      //+3 Cards
   150001:  892:      smithyF(currentPlayer, state, handPos);
call    0 returned 100%
   150001:  893:      return 0;
        -:  894:		
        -:  895:    case village:
        1:  896:	villageF(currentPlayer, state, handPos);
call    0 returned 100%
        1:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
        -:  951:      //+1 Card
    #####:  952:      drawCard(currentPlayer, state);
call    0 never executed
        -:  953:			
        -:  954:      //+1 Actions
    #####:  955:      state->numActions++;
        -:  956:			
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case minion:
        -:  962:      //+1 action
    #####:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  967:			
    #####:  968:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  969:	{
    #####:  970:	  state->coins = state->coins + 2;
        -:  971:	}
        -:  972:			
    #####:  973:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //discard hand
    #####:  976:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  977:	    {
    #####:  978:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //draw 4
    #####:  982:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  985:	    }
        -:  986:				
        -:  987:	  //other players discard hand and redraw if hand size > 4
    #####:  988:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  993:		    {
        -:  994:		      //discard hand
    #####:  995:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  998:			}
        -:  999:							
        -: 1000:		      //draw 4
    #####: 1001:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1002:			{
    #####: 1003:			  drawCard(i, state);
call    0 never executed
        -: 1004:			}
        -: 1005:		    }
        -: 1006:		}
        -: 1007:	    }
        -: 1008:				
        -: 1009:	}
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case steward:
    #####: 1013:	stewardF(currentPlayer, state, choice1, choice2, choice3, handPos);
call    0 never executed
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1065:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1066:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 150002 returned 100% blocks executed 100%
   150002: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
   150002: 1257:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1258:    {
        -: 1259:      //add card to played pile
   150002: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   150002: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
   150002: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
   150002: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
     1589: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
   148413: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
      292: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
   148121: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
   148121: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
   148121: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
   150002: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 250444 returned 100% blocks executed 100%
   250444: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
   250444: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
  1502004: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
  1251560: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1339:	{
  1000786: 1340:	  state->coins += 1;
        -: 1341:	}
   250774: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1343:	{
      330: 1344:	  state->coins += 2;
        -: 1345:	}
   250444: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1347:	{
      330: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
   250444: 1353:  state->coins += bonus;
        -: 1354:
   250444: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
Function 'main'
Lines executed:80.00% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:57.14% of 7

File 'unittest1.c'
Lines executed:80.00% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:57.14% of 7
Creating 'unittest1.c.gcov'

Function 'main'
Lines executed:83.33% of 42
Branches executed:100.00% of 16
Taken at least once:75.00% of 16
Calls executed:71.43% of 14

File 'unittest2.c'
Lines executed:83.33% of 42
Branches executed:100.00% of 16
Taken at least once:75.00% of 16
Calls executed:71.43% of 14
Creating 'unittest2.c.gcov'

Function 'main'
Lines executed:83.87% of 31
Branches executed:90.00% of 20
Taken at least once:55.00% of 20
Calls executed:73.68% of 19

File 'unittest3.c'
Lines executed:83.87% of 31
Branches executed:90.00% of 20
Taken at least once:55.00% of 20
Calls executed:73.68% of 19
Creating 'unittest3.c.gcov'

Function 'main'
Lines executed:76.92% of 26
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:69.23% of 13

File 'unittest4.c'
Lines executed:76.92% of 26
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:69.23% of 13
Creating 'unittest4.c.gcov'

Function 'main'
Lines executed:81.58% of 38
Branches executed:100.00% of 26
Taken at least once:65.38% of 26
Calls executed:63.64% of 11

File 'cardtest1.c'
Lines executed:81.58% of 38
Branches executed:100.00% of 26
Taken at least once:65.38% of 26
Calls executed:63.64% of 11
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************
        -:    2:* Author: Jasmine Kim
        -:    3:* Date: 2-6-19
        -:    4:* Assignment: cardtest1.c tests the adventurer
        -:    5:* card 
        -:    6:********************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
function main called 1 returned 100% blocks executed 80%
        1:   15:int main()
        -:   16:{
        -:   17:    int i;
        1:   18:    int false = 0;
        1:   19:    int seed = 1000;
        1:   20:    int numPlayers = 2;
        1:   21:    int thisPlayer = 0;
        -:   22:    int card1;
        -:   23:    int card2;
        1:   24:    int endCount = 0;
        1:   25:    int startCount = 0;
        -:   26:    struct gameState G, testG;
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:                remodel, smithy, village, baron, great_hall};
        -:   29:    
        1:   30:    printf("TESTING adventurer_card():\n");
call    0 returned 100%
        -:   31:    
        1:   32:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   33:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:    
        -:   35:    //Tests that the player received the adventurer card
        1:   36:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        1:   37:    testG.handCount[thisPlayer]++;
        1:   38:    if(G.handCount[thisPlayer]+ 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   39:    {
        1:   40:        printf("Test passed. The Adventurer card has been drawn.\n");
call    0 returned 100%
        -:   41:    }
        -:   42:    else
        -:   43:    {
    #####:   44:        printf("Test failed. The Adventurer card has not been drawn.\n");
call    0 never executed
    #####:   45:        false = 1;
        -:   46:    }
        -:   47:    
        1:   48:    cardEffect(adventurer, 0, 0, 0, &testG, testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], 0);
call    0 returned 100%
        -:   49:    
        -:   50:    //Tests for how many treasure cards are drawn
        9:   51:    for(i=0; i < testG.handCount[thisPlayer]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:   52:    {
        8:   53:        card1 = testG.hand[thisPlayer][i];
        8:   54:        if(card1 == copper || card1 == silver || card1 == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   55:        {
        6:   56:            endCount++;
        -:   57:        }
        -:   58:    }
        -:   59:    
        6:   60:    for(i=0; i < G.handCount[thisPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   61:    {
        5:   62:        card2 = G.hand[thisPlayer][i];
        5:   63:        if(card2 == copper || card2 == silver || card2 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   64:        {
        4:   65:            startCount++;
        -:   66:        }
        -:   67:    }
        -:   68:    
        -:   69:    //Test to make sure the correct amount of treasure cards were drawn
        1:   70:    if(((endCount - startCount) > 0) && ((endCount - startCount) < 3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   71:    {
        1:   72:        printf("Test passed! %d treasure cards were drawn!\n", (endCount-startCount));
call    0 returned 100%
        -:   73:    }
        -:   74:    else{
    #####:   75:        printf("Test failed. %d treasure cards. Not enough or too many drawn.\n", (endCount-startCount));
call    0 never executed
    #####:   76:        false = 1;
        -:   77:    }
        -:   78:    
        1:   79:    if (G.handCount[thisPlayer] < testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:    {
        1:   81:        printf("Test passed! Cards were added to the hand.\n");
call    0 returned 100%
        -:   82:    }
        -:   83:    else
        -:   84:    {
    #####:   85:        printf("Test failed. Cards were not added to the hand.\n");
call    0 never executed
    #####:   86:        false = 1;
        -:   87:    }
        -:   88:        
        -:   89:    //Tests to make sure all tests pass. If not, the program asks user to review
        1:   90:    if(false==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:    {
        1:   92:        printf("Congrats! Tests passed!\n\n");
call    0 returned 100%
        -:   93:    }
        -:   94:    else
        -:   95:    {
    #####:   96:        printf("Tests failed. Please review.\n\n");
call    0 never executed
        -:   97:    }
        1:   98:    return 0;
        -:   99:}
Function 'main'
Lines executed:80.00% of 25
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:66.67% of 9

File 'cardtest2.c'
Lines executed:80.00% of 25
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:66.67% of 9
Creating 'cardtest2.c.gcov'

Function 'main'
Lines executed:79.31% of 29
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:63.64% of 11

File 'cardtest3.c'
Lines executed:79.31% of 29
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:63.64% of 11
Creating 'cardtest3.c.gcov'

