        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************
        -:    2:* Author: Jasmine Kim
        -:    3:* Date: 2-6-19
        -:    4:* Assignment: unittest1.c tests the whoseTurn
        -:    5:* function
        -:    6:********************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include <stdlib.h>
        -:   15:#include "assert.h"
        -:   16:
        -:   17://Tests the whoseTurn function
function main called 1 returned 100% blocks executed 73%
        1:   18:int main()
        -:   19:{
        -:   20:    struct gameState G;
        -:   21:    int i;
        1:   22:    int false=0;
        1:   23:    int x=0;
        -:   24:
        -:   25:
        1:   26:    printf("TESTING whoseTurn() function.\n");
call    0 returned 100%
        -:   27:
        -:   28:    //Tested function for 5 turns, will print if passed for each turn
        6:   29:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   30:    {
        5:   31:        G.whoseTurn = x;
        -:   32:
        5:   33:        if(whoseTurn(&G) == x)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   34:        {
        5:   35:            printf("Test # %d passed!\n", i+1);
call    0 returned 100%
        -:   36:        }
        -:   37:        else
        -:   38:        {
    #####:   39:            printf("Test # %d failed. Expected: %d   Actual: %d\n", i+1, x, whoseTurn(&G));
call    0 never executed
call    1 never executed
    #####:   40:            false = 1;
        -:   41:        }
        5:   42:        x++;
        -:   43:    }
        -:   44:
        1:   45:    if(false == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   46:    {
        1:   47:        printf("All tests passed!\n");
call    0 returned 100%
        -:   48:    }
        -:   49:    else
        -:   50:    {
    #####:   51:        printf("Test(s) failed. Try again");
call    0 never executed
        -:   52:    }
        -:   53:
        1:   54:    return 0;
        -:   55:}
