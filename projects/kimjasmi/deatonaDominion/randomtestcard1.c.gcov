        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**************************************
        -:    2:*Author: Jasmine Kim
        -:    3:*Date: 2-22-19
        -:    4:*Assignment: Testing the smithy card
        -:    5:*****************************************/
        -:    6:
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <time.h>
        -:   16:
        -:   17:#define ITERATIONS 150000
        -:   18:
function main called 1 returned 100% blocks executed 100%
        1:   19:int main()
        -:   20:{
        1:   21:    int seed = 1000;
        1:   22:    int numPlayers = 2;
        1:   23:    int currentPlayer = 0;
        -:   24:    struct gameState G;
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:                remodel, smithy, village, baron, great_hall};
        -:   27:
        -:   28:    int false;
        -:   29:    int deckSize;
        -:   30:    int handSize;
        -:   31:    int handPos;
        -:   32:    int prevDeck;
        -:   33:    int afterDeck;
        -:   34:    int prevHand;
        -:   35:    int afterHand;
        -:   36:    int discardBefore;
        -:   37:    int discardAfter;
        -:   38:    int i;
        1:   39:    int deckFail = 0;
        1:   40:    int handFail = 0;
        -:   41:    //int discardFail = 0;
        1:   42:    int testPassed = 0;
        -:   43:
        1:   44:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
   150001:   45:    for(i=0; i < ITERATIONS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   46:    {
   150000:   47:        initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   48:
        -:   49:	//set random deck size and hand size
   150000:   50:        deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
   150000:   51:        handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   52:
   150000:   53:        G.deckCount[0] = deckSize - handSize;
   150000:   54:        G.handCount[0] = handSize;
        -:   55:
        -:   56:	//sets the position of the card in the players hand
   150000:   57:        handPos = G.hand[currentPlayer][G.handCount[currentPlayer] - 1];
   150000:   58:        prevDeck = G.deckCount[0];
   150000:   59:        prevHand = G.handCount[0];
   150000:   60:        discardBefore = G.playedCardCount;
        -:   61:	
        -:   62:	//plays the smithy card
   150000:   63:         cardEffect(smithy, 0, 0, 0, &G,
call    0 returned 100%
   150000:   64:            G.hand[currentPlayer][G.handCount[currentPlayer]-1], 0);
        -:   65:
   150000:   66:        afterDeck = G.deckCount[0];
   150000:   67:        afterHand = G.handCount[0];
   150000:   68:        discardAfter = G.playedCardCount;
        -:   69:
   150000:   70:        false = 0;
        -:   71:
        -:   72:	//tests for correct number of cards drawn
   150000:   73:        if(afterHand != (prevHand + 2)){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     5375:   74:            printf("Test fail - number of cards drawn incorrect\n");
call    0 returned 100%
     5375:   75:            handFail++;
     5375:   76:            false = 1;
        -:   77:        }
        -:   78:
   150000:   79:        if(afterDeck != (prevDeck - 3)){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     5375:   80:            printf("Test fail - number of cards taken from deck incorrect \n");
call    0 returned 100%
     5375:   81:            deckFail++;
     5375:   82:            false = 1;
        -:   83:        }
        -:   84:
        -:   85:     //   if(discardAfter != (discardBefore + 1)){
        -:   86:     //       printf("Test fail - Smithy card not disposed of properly\n");
        -:   87:     //       discardFail++;
        -:   88:     //       false = 1;
        -:   89:     //   }
        -:   90:
   150000:   91:        if(false == 0){
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
   144625:   92:            printf("All tests have passed!\n");
call    0 returned 100%
   144625:   93:            testPassed++;
        -:   94:        }
        -:   95:
        -:   96:    }
        -:   97:
        1:   98:    printf("\n");
call    0 returned 100%
        1:   99:    printf("Number of Tests Passed: %d\n", testPassed);
call    0 returned 100%
        1:  100:    printf("Number of Cards Drawn Failed: %d\n", handFail);
call    0 returned 100%
        -:  101:  //  printf("Number of failed Smithy Card discards: %d\n\n", discardFail);
        -:  102:
        1:  103:    return 0;
        -:  104:}
