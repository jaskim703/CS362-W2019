        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************
        -:    2:* Author: Jasmine Kim
        -:    3:* Date: 2-6-19
        -:    4:* Assignment: unittest3.c tests the isGameOver
        -:    5:* function
        -:    6:********************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <math.h>
        -:   14:#include <stdlib.h>
        -:   15:#include <assert.h>
        -:   16:
        -:   17://Tests the isGameOver function
function main called 1 returned 100% blocks executed 82%
        1:   18:int main()
        -:   19:{
        -:   20:    struct gameState G, testG;
        -:   21:    int i;
        1:   22:    int false=0;
        1:   23:    int seed = 1000;
        1:   24:    int numPlayers = 2;
        -:   25:
        1:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   27:                remodel, smithy, village, baron, great_hall};
        -:   28:
        1:   29:    printf("TESTING isGameOver() function.\n");
call    0 returned 100%
        -:   30:
        1:   31:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        -:   34:    //check to see if game ends when province cards != 0
        1:   35:    printf("Current number of Province cards: %d\n", G.supplyCount[province]);
call    0 returned 100%
        1:   36:    if(isGameOver(&G))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   37:    {
    #####:   38:        printf("Test failed. Game ended incorrectly\n");
call    0 never executed
        -:   39:    }
        -:   40:    else
        -:   41:    {
        1:   42:        printf("Game continues\n");
call    0 returned 100%
        -:   43:    }
        -:   44:
        -:   45:    //check to see if game ends when province cards == 0
        1:   46:    G.supplyCount[province] = 0;
        1:   47:    printf("Current number of Province cards: %d\n", G.supplyCount[province]);
call    0 returned 100%
        1:   48:    if(isGameOver(&G))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   49:    {
        1:   50:        printf("Test passed! Game ended correctly\n");
call    0 returned 100%
        -:   51:    }
        -:   52:    else
        -:   53:    {
    #####:   54:        printf("Test failed. Game continues when it should be over\n");
call    0 never executed
        -:   55:    }
        -:   56:
        -:   57:    //check to see if game ends when 3 supply piles all equal 0
        1:   58:    G.supplyCount[province] = 8;   //number of province cards when there are 2 players
        4:   59:    for(i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   60:    {
        -:   61:	//set supply count to 0
        3:   62:        G.supplyCount[i] = 0;
        -:   63:
        3:   64:        if (isGameOver(&G) && i == 2)
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:   65:        {
        1:   66:            printf("Test passed! Game ended correctly\n");
call    0 returned 100%
        -:   67:        }
        2:   68:        else if (!isGameOver(&G) && i == 2)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:   69:        {
    #####:   70:             printf("Test failed. Game continues when it should be over\n");
call    0 never executed
        -:   71:        }
        2:   72:        else if (isGameOver(&G) && i < 2)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
        -:   73:        {
    #####:   74:            printf("Test failed. Game ended incorrectly\n");
call    0 never executed
        -:   75:        }
        -:   76:        else
        -:   77:        {
        2:   78:            printf("Test passed! Game continues as it should\n");
call    0 returned 100%
        -:   79:        }
        -:   80:
        -:   81:    }
        -:   82:
        1:   83:    if(false == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   84:    {
        1:   85:        printf("All tests passed!\n");
call    0 returned 100%
        -:   86:    }
        -:   87:    else
        -:   88:    {
    #####:   89:        printf("Tests failed. Please review.\n");
call    0 never executed
        -:   90:    }
        1:   91:    return 0;
        -:   92:
        -:   93:
        -:   94:}
