        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************
        -:    2:* Author: Jasmine Kim
        -:    3:* Date: 2-6-19
        -:    4:* Assignment: cardtest1.c tests the adventurer
        -:    5:* card 
        -:    6:********************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
function main called 1 returned 100% blocks executed 77%
        1:   15:int main()
        -:   16:{
        -:   17:    int i;
        1:   18:    int false = 0;
        1:   19:    int seed = 1000;
        1:   20:    int numPlayers = 2;
        1:   21:    int thisPlayer = 0;
        -:   22:    int cardDrawn1;
        -:   23:    int cardDrawn2;
        1:   24:    int finalCount = 0;
        1:   25:    int originalCount = 0;
        -:   26:    struct gameState G, testG;
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:                remodel, smithy, village, baron, great_hall};
        -:   29:    
        1:   30:    printf("TESTING adventurer_card():\n");
call    0 returned 100%
        -:   31:    
        1:   32:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   33:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:    
        1:   35:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = adventurer;
        1:   36:    testG.handCount[thisPlayer]++;
        1:   37:    if(G.handCount[thisPlayer]+ 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   38:    {
        1:   39:        printf("Test passed. The Adventurer card has been drawn.\n");
call    0 returned 100%
        -:   40:    }
        -:   41:    else
        -:   42:    {
    #####:   43:        printf("Test failed. The Adventurer card has not been drawn.\n");
call    0 never executed
    #####:   44:        false = 1;
        -:   45:    }
        -:   46:    
        1:   47:    cardEffect(adventurer, 0, 0, 0, &testG, testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], 0);
call    0 returned 100%
        -:   48:    
        8:   49:    for(i=0; i < testG.handCount[thisPlayer]; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   50:    {
        7:   51:        cardDrawn1 = testG.hand[thisPlayer][i];
        7:   52:        if(cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   53:        {
        5:   54:            finalCount++;
        -:   55:        }
        -:   56:    }
        -:   57:    
        6:   58:    for(i=0; i < G.handCount[thisPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   59:    {
        5:   60:        cardDrawn2 = G.hand[thisPlayer][i];
        5:   61:        if(cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   62:        {
        4:   63:            originalCount++;
        -:   64:        }
        -:   65:    }
        -:   66:    
        1:   67:    if((finalCount - originalCount) > 0 || (finalCount - originalCount) < 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:   68:    {
        1:   69:        printf("Test passed! %d treasure cards were drawn!\n", (finalCount-originalCount));
call    0 returned 100%
        -:   70:    }
        -:   71:    else{
    #####:   72:        printf("Test failed. Not enough or too many treasure cards drawn.\n");
call    0 never executed
    #####:   73:        false = 1;
        -:   74:    }
        -:   75:    
        1:   76:    if (G.handCount[thisPlayer] < testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:    {
        1:   78:        printf("Test passed! Cards were added to the hand.\n");
call    0 returned 100%
        -:   79:    }
        -:   80:    else
        -:   81:    {
    #####:   82:        printf("Test failed. Cards were not added to the hand.\n");
call    0 never executed
    #####:   83:        false = 1;
        -:   84:    }
        -:   85:        
        1:   86:    if(false==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   87:    {
        1:   88:        printf("Congrats! Tests passed!\n\n");
call    0 returned 100%
        -:   89:    }
        -:   90:    else
        -:   91:    {
    #####:   92:        printf("Tests failed. Please review.\n\n");
call    0 never executed
        -:   93:    }
        1:   94:    return 0;
        -:   95:}
