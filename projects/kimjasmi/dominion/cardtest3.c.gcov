        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************
        -:    2:* Author: Jasmine Kim
        -:    3:* Date: 2-6-19
        -:    4:* Assignment: cardtest3.c tests the village
        -:    5:* card
        -:    6:********************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
function main called 1 returned 100% blocks executed 65%
        1:   15:int main()
        -:   16:{
        1:   17:    int seed = 1000;
        1:   18:    int numPlayers = 2;
        1:   19:    int thisPlayer = 0;
        1:   20:    int false = 0;
        -:   21:    struct gameState G, testG;
        1:   22:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:                remodel, smithy, village, baron, great_hall};
        -:   24:
        1:   25:    printf("TESTING village_card():\n");
call    0 returned 100%
        -:   26:
        1:   27:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   28:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   29:
        1:   30:    testG.hand[thisPlayer][testG.handCount[thisPlayer]] = village;
        1:   31:    testG.handCount[thisPlayer]++;
        1:   32:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   33:        printf("Test passed! The Village card has been drawn.\n");
call    0 returned 100%
        -:   34:    else
        -:   35:    {
    #####:   36:        printf("Test failed. The Village card has not been drawn.\n");
call    0 never executed
    #####:   37:        false = 1;
        -:   38:    }
        -:   39:
        1:   40:    cardEffect(village, 0, 0, 0, &testG,
call    0 returned 100%
        1:   41:            testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], 0);
        -:   42:
        1:   43:    if (G.handCount[thisPlayer] + 1 == testG.handCount[thisPlayer])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   44:        printf("Test passed! The current player has drawn a new card.\n");
call    0 returned 100%
        -:   45:    else
        -:   46:    {
    #####:   47:        printf("Test failed. The current player has not drawn a new card.\n");
call    0 never executed
    #####:   48:        false = 1;
        -:   49:    }
        -:   50:
        -:   51:    /* Tests for +2 action gain by Player 1. */
        1:   52:    if (G.numActions + 2 == testG.numActions)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:        printf("Test passed! The current player has +2 actions.\n");
call    0 returned 100%
        -:   54:    else
        -:   55:    {
    #####:   56:        printf("Test failed. The current player did not get +2 actions.\n");
call    0 never executed
    #####:   57:        false = 1;
        -:   58:    }
        -:   59:
        1:   60:    if(false==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   61:    {
        1:   62:        printf("Congrats! Tests passed!\n\n");
call    0 returned 100%
        -:   63:    }
        -:   64:    else
        -:   65:    {
    #####:   66:        printf("Tests failed. Please review.\n\n");
call    0 never executed
        -:   67:    }
        1:   68:    return 0;
        -:   69:}
